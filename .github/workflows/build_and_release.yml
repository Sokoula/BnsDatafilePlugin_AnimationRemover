name: MSBuild

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  SOLUTION_FILE_PATH: .
  BUILD_CONFIGURATION: Release

permissions:
  contents: write

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: recursive
        fetch-depth: 0

    - name: Set up Git identity
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get latest version
      id: get_version
      run: |
        set -x
        echo "[DEBUG] All tags:"
        git fetch --tags
        git tag --list
        
        TAG=$(git tag --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
        TAG=$(echo "$TAG" | tr -d '[:space:]')
        echo "[DEBUG] TAG='$TAG'"
        
        if [ -z "$TAG" ]; then
          echo "[DEBUG] No matching tag found, using v1.0.0"
          TAG="v1.0.0"
          VER="1.0.0"
          MAJOR=1
          MINOR=0
          PATCH=0
        else
          echo "[DEBUG] Latest tag: $TAG"
          VER=${TAG#v}
          echo "[DEBUG] Version string: $VER"
        IFS='.' read -r MAJOR MINOR PATCH <<EOF
        $VER
        EOF
          echo "[DEBUG] Parsed: MAJOR='$MAJOR' MINOR='$MINOR' PATCH='$PATCH'"
          if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
            echo "[ERROR] Failed to parse version! VER='$VER' MAJOR='$MAJOR' MINOR='$MINOR' PATCH='$PATCH'"
            exit 1
          fi
        fi
        
        PATCH=$((PATCH + 1))
        NEW_TAG="v$MAJOR.$MINOR.$PATCH"
        NEW_VER="$MAJOR.$MINOR.$PATCH"
        echo "[DEBUG] new_tag=$NEW_TAG new_version=$NEW_VER"
        echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VER" >> $GITHUB_OUTPUT
      shell: bash

    - name: Update PLUGIN_VERSION in plugin_version.h
      run: |
        sed -i 's/#define PLUGIN_VERSION "[0-9.]*"/#define PLUGIN_VERSION "${{ steps.get_version.outputs.new_version }}"/' BnsDatafilePlugin_AnimationRemover/plugin_version.h
      shell: bash

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}

    - name: Verify DLL built
      id: verify_dll
      run: |
        if [ ! -f "bin/BnsDatafilePlugin_AnimationRemover/ReleaseX64/AnimationFilter.dll" ]; then
          echo "DLL not found! Build failed or wrong path."
          exit 1
        fi
      shell: bash

    - name: Commit, tag, and push version bump
      run: |
        git add BnsDatafilePlugin_AnimationRemover/plugin_version.h
        git commit -m "Bump PLUGIN_VERSION to ${{ steps.get_version.outputs.new_version }}"
        git tag ${{ steps.get_version.outputs.new_tag }}
        git push
        git push origin ${{ steps.get_version.outputs.new_tag }}
      shell: bash

    - name: Set DLL path output
      id: find_dll
      run: echo "dll_path=bin/BnsDatafilePlugin_AnimationRemover/ReleaseX64/AnimationFilter.dll" >> $GITHUB_OUTPUT
      shell: bash

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.get_version.outputs.new_tag }}
        name: Release ${{ steps.get_version.outputs.new_tag }}
        files: ${{ steps.find_dll.outputs.dll_path }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
